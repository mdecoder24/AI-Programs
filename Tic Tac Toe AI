player, opponent = 'X', 'O'

def isMovesLeft(board):
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                return True
    return False

def evaluate(board):
    for row in range(3):
        if board[row][0] == board[row][1] == board[row][2] != '_':
            if board[row][0] == player:
                return 10
            elif board[row][0] == opponent:
                return -10

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != '_':
            if board[0][col] == player:
                return 10
            elif board[0][col] == opponent:
                return -10

    if board[0][0] == board[1][1] == board[2][2] != '_':
        if board[0][0] == player:
            return 10
        elif board[0][0] == opponent:
            return -10

    if board[0][2] == board[1][1] == board[2][0] != '_':
        if board[0][2] == player:
            return 10
        elif board[0][2] == opponent:
            return -10

    return 0

def minimax(board, depth, isMax):
    score = evaluate(board)
    if score == 10:
        return score - depth
    if score == -10:
        return score + depth
    if not isMovesLeft(board):
        return 0

    if isMax:
        best = -1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = player
                    best = max(best, minimax(board, depth + 1, not isMax))
                    board[i][j] = '_'
        return best
    else:
        best = 1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = opponent
                    best = min(best, minimax(board, depth + 1, not isMax))
                    board[i][j] = '_'
        return best

def findBestMove(board):
    bestVal = -1000
    bestMove = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                board[i][j] = player
                moveVal = minimax(board, 0, False)
                board[i][j] = '_'
                if moveVal > bestVal:
                    bestMove = (i, j)
                    bestVal = moveVal
    return bestMove

def print_board(board):
    for row in board:
        print("|".join(row))
    print("-" * 5)

board = [['_'] * 3 for _ in range(3)]
print("Initial Board:")
print_board(board)

while True:
    player_row = int(input("Enter row number (0, 1, or 2): "))
    player_col = int(input("Enter column number (0, 1, or 2): "))
    if board[player_row][player_col] != '_':
        print("That cell is already taken. Try again.")
        continue
    board[player_row][player_col] = player
    if evaluate(board) == 10:
        print("Player (X) wins!")
        break
    if not isMovesLeft(board):
        print("It's a tie!")
        break
    ai_row, ai_col = findBestMove(board)
    print(f"AI (O) plays at row {ai_row}, column {ai_col}.")
    board[ai_row][ai_col] = opponent
    if evaluate(board) == -10:
        print("AI (O) wins!")
        break
    if not isMovesLeft(board):
        print("It's a tie!")
        break
    print("Current Board:")
    print_board(board)
